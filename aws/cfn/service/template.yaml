AWSTemplateFormatVersion: 2010-09-09

Description: |
  Task Definition
  Fargate Service
  Execution Role
  Task Role

Parameters:
  NetworkingStack:
    Type: String
    Description: This is our base layer of networking components eg. VPC, Subnets
    Default: CrdNet

  ClusterStack:
    Type: String
    Description: This is our cluster layer eg ECS cluster
    Default: CrdCluster
  
  ContainerPort:
    Type: Number
    Default: 4567
  
  TaskFamily: 
    Type: String
    Default: backend-flask
  
  ServiceName:
    Type: String
    Default: backend-flask

  ServiceName:
    Type: String
    Default: backend-flask

  ServiceCpu:
    Type: String
    Default: '256'

  ServiceMemory:
    Type: String
    Default: '512'

  EcrImage:
    Type: String
    Default: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/backend-flask'

  EnvOtelServiceName:
    Type: String
    Default: backend-flask

  EnvOtelExporterOtlpEndpoint:
    Type: String
    Default: https://api.honeycomb.io

  EnvAWSCognitoUserPoolId:
    Type: String
    Default: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cruddur/backend-flask/AWS_COGNITO_USER_POOL_ID'

  EnvCognitoUserPoolClientId:
    Type: String
    Default: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cruddur/backend-flask/AWS_COGNITO_USER_POOL_CLIENT_ID'

  EnvFrontendUrl:
    Type: String
    Default: "*"

  EnvBackendUrl:
    Type: String
    Default: "*"

  SecretsAWSAccessKeyId:
    Type: String
    Default: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cruddur/backend-flask/AWS_ACCESS_KEY_ID'

  SecretsSecretAccessKey:
    Type: String
    Default: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cruddur/backend-flask/AWS_SECRET_ACCESS_KEY'

  SecretsConnectionUrl:
    Type: String
    Default: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cruddur/backend-flask/CONNECTION_URL'

  SecretsRollbarAccessToken:
    Type: String
    Default: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cruddur/backend-flask/ROLLBAR_ACCESS_TOKEN'

  SecretOtelExporterOltpHeaders:
    Type: String
    Default: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cruddur/backend-flask/OTEL_EXPORTER_OTLP_HEADERS'

Resources:
  ServiceSG:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Public Facing SG for Cruddur ALB
      GroupName: !Sub "${AWS::StackName}ALBSG"
      VpcId: 
        Fn::ImportValue:
          !Sub ${NetworkingStack}VpcId
      SecurityGroupIngress:
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-rule-1.html 
        - IpProtocol: tcp
          SourceSecurityGroupId: 
            Fn::ImportValue:
              !Sub ${ClusterStack}ALBSecurityGroupId
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: ALB HTTP

  FargateService:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
    Type: AWS::ECS::Service
    Properties:
      Cluster: String
      DeploymentConfiguration:
      DeploymentController:
      DesiredCount: 0
      EnableECSManagedTags: true
      EnableExecuteCommand: true 
      HealthCheckGracePeriodSeconds: 
      LaunchType: 
      LoadBalancers:
        - TargetGroupArn: "arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/cruddur-backend-flask-tg/174e05c72838dc23"
        - ContainerName: 'backend-flask'
        - ContainerPort: !Ref ContainerPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ServiceSG.GroupId
          Subnets:
            Fn::Split:
              - ","
              - Fn::ImportValue:
                  !Sub "${NetworkingStack}PublicSubnetIds"
      PlatformVersion: LATEST
      PropagateTags: SERVICE
      ServiceRegistries:
        - RegistryArn: !Sub 'arn:aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/srv-cruddur-backend-flask'
          Port: !Ref ContainerPort
          ContainerName: 'backend-flask'
          ContainerPort: !Ref ContainerPort
      ServiceName: !Ref ServiceName
      TaskDefinition: !Ref TaskFamily

  TaskDefinition:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
      Type: 'AWS::ECS::TaskDefinition'
      Properties:
        Family: !Ref TaskFamily
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        TaskRoleArn: !GetAtt TaskRole.Arn
        NetworkMode: 'awsvpc'
        Cpu: !Ref ServiceCpu
        Memory: !Ref ServiceMemory
        RequiresCompatibilities:
          - 'FARGATE'
        ContainerDefinitions:
          - Name: 'xray'
            Image: 'public.ecr.aws/xray/aws-xray-daemon'
            Essential: true
            User: '1337'
            PortMappings:
              - Name: 'xray'
                ContainerPort: 2000
                Protocol: 'udp'
          - Name: 'backend-flask'
            Image: !Ref EcrImage 
            Essential: true
            HealthCheck:
              Command:
                - 'CMD-SHELL'
                - 'python /backend-flask/bin/health-check'
              Interval: 30
              Timeout: 5
              Retries: 3
              StartPeriod: 60
            PortMappings:
              - Name: !Ref ContainerName
                ContainerPort: !Ref ContainerPort
                Protocol: 'tcp'
                AppProtocol: 'http'
            LogConfiguration:
              LogDriver: 'awslogs'
              Options:
                awslogs-group: 'cruddur'
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: !Ref ServiceName
            Environment:
              - Name: 'OTEL_SERVICE_NAME'
                Value: !Ref EnvOtelServiceName
              - Name: 'OTEL_EXPORTER_OTLP_ENDPOINT'
                Value: !Ref EnvOtelExporterOtlpEndpoint
              - Name: 'AWS_COGNITO_USER_POOL_ID'
                Value: !Ref EnvAWSCognitoUserPoolId
              - Name: 'AWS_COGNITO_USER_POOL_CLIENT_ID'
                Value: !Ref EnvCognitoUserPoolClientId
              - Name: 'FRONTEND_URL'
                Value: !Ref EnvFrontendUrl
              - Name: 'BACKEND_URL'
                Value: !Ref EnvBackendUrl
              - Name: 'AWS_DEFAULT_REGION'
                Value: !Ref AWS::Region
            Secrets:
              - Name: 'AWS_ACCESS_KEY_ID'
                ValueFrom: !Ref SecretsAWSAccessKeyId
              - Name: 'AWS_SECRET_ACCESS_KEY'
                ValueFrom: !Ref SecretsSecretAccessKey
              - Name: 'CONNECTION_URL'
                ValueFrom: !Ref SecretsConnectionUrl
              - Name: 'ROLLBAR_ACCESS_TOKEN'
                ValueFrom: !Ref SecretsRollbarAccessToken
              - Name: 'OTEL_EXPORTER_OTLP_HEADERS'
                ValueFrom: !Ref SecretsOtelExporterOltpHeaders

  ExecutionRole:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties:
      RoleName: CruddurServiceExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'cruddur-execution-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'VisualEditor0'
                Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Sid: 'VisualEditor1'
                Effect: 'Allow'
                Action:
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cruddur/${ServiceName}/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        
  TaskRole:
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
      Type: AWS::IAM::Role
      Properties:
        RoleName: CruddurServiceTaskRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service: 'ecs-tasks.amazonaws.com'
              Action: 'sts:AssumeRole'
        Policies:
          - PolicyName: 'cruddur-task-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Sid: 'VisualEditor0'
                  Effect: 'Allow'
                  Action:
                    - ssmmessages:CreateControlChannel
                    - ssmmessages:CreateDataChannel
                    - ssmmessages:OpenControlChannel
                    - ssmmessages:OpenDataChannel
                  Resource: '*'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
  
